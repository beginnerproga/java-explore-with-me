CREATE TABLE IF NOT EXISTS users
(
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name   CHARACTER VARYING(50)                   NOT NULL,
    email  CHARACTER VARYING(200)                  NOT NULL UNIQUE,
    rating BIGINT,
    CONSTRAINT PK_USERS PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS categories
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name CHARACTER VARYING(100)                  NOT NULL UNIQUE,
    CONSTRAINT PK_CATEGORIES PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS events
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation         CHARACTER VARYING(1000)                 NOT NULL,
    confirmed_requests INTEGER,
    created_on         TIMESTAMP WITHOUT TIME ZONE,
    description        CHARACTER VARYING(1000),
    event_date         TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    initiator_id       BIGINT                                  NOT NULL,
    lat                FLOAT                                   NOT NUll,
    lon                FLOAT                                   NOT NULL,
    paid               BOOLEAN                                 NOT NULL,
    participant_limit  BIGINT                                  NOT NULL,
    published_on       TIMESTAMP WITHOUT TIME ZONE,
    request_moderation BOOLEAN,
    state              CHARACTER VARYING(15),
    title              CHARACTER VARYING(500),
    views              BIGINT,
    category_id        INTEGER                                 NOT NULL,
    rating             BIGINT,
    CONSTRAINT PK_EVENTS PRIMARY KEY (id),
    CONSTRAINT FK_EVENTS_CATEGORIES FOREIGN KEY (category_id)
        REFERENCES categories (id) ON DELETE CASCADE,
    CONSTRAINT FK_EVENTS_USERS FOREIGN KEY (initiator_id)
        REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS requests
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id     BIGINT                                  NOT NULL,
    requester_id BIGINT                                  NOT NULL,
    status       CHARACTER VARYING(50)                   NOT NULL,
    created_on   TIMESTAMP without time zone             NOT NULL,
    CONSTRAINT PK_REQUESTS PRIMARY KEY (id),
    CONSTRAINT FK_REQUESTS_EVENTS FOREIGN KEY (event_id)
        references events (id) ON DELETE CASCADE,
    CONSTRAINT FK_REQUESTS_USERS FOREIGN KEY (requester_id)
        references users (id) ON DELETE CASCADE,
    CONSTRAINT UQ_PARTICIPANT_PER_EVENT UNIQUE (requester_id, event_id)
);

CREATE TABLE IF NOT EXISTS compilations
(
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title  CHARACTER VARYING(500)                  NOT NULL,
    pinned BOOLEAN                                 NOT NULL,
    CONSTRAINT PK_COMPILATIONS PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS compilations_events
(
    compilation_id BIGINT NOT NULL,
    event_id       BIGINT NOT NULL,
    CONSTRAINT FK_COMPILATIONS_EVENTS FOREIGN KEY (event_id)
        references events (id),
    CONSTRAINT FK_EVENTS_COMPILATIONS FOREIGN KEY (compilation_id)
        references compilations (id),
    CONSTRAINT pk_compilation_of_events PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE IF NOT EXISTS likes
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id BIGINT                                  NOT NULL,
    user_id  BIGINT                                  NOT NULL,
    is_like  BOOLEAN                                 NOT NULL,
    CONSTRAINT PK_LIKES PRIMARY KEY (id),
    CONSTRAINT FK_LIKES_EVENTS FOREIGN KEY (event_id)
        references events (id) ON DELETE CASCADE,
    CONSTRAINT FK_LIKES_USERS FOREIGN KEY (user_id)
        references users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS visits
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id BIGINT                                  NOT NULL,
    user_id  BIGINT                                  NOT NULL,
    CONSTRAINT FK_VISITS_EVENTS FOREIGN KEY (event_id)
        references events (id),
    CONSTRAINT FK_VISITS_USERS FOREIGN KEY (user_id)
        references users (id)
);
